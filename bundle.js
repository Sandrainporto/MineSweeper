/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/combine.js":
/*!***************************!*\
  !*** ./src/js/combine.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _structure_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./structure.js */ \"./src/js/structure.js\");\n/* harmony import */ var _limit_inputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./limit-inputs.js */ \"./src/js/limit-inputs.js\");\n/* harmony import */ var _dark_theme_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dark-theme.js */ \"./src/js/dark-theme.js\");\n/* harmony import */ var _sounds_clickAudio_mp3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../sounds/clickAudio.mp3 */ \"./src/sounds/clickAudio.mp3\");\n/* harmony import */ var _sounds_bombAudio_mp3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../sounds/bombAudio.mp3 */ \"./src/sounds/bombAudio.mp3\");\n/* harmony import */ var _sounds_loseAudio_mp3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../sounds/loseAudio.mp3 */ \"./src/sounds/loseAudio.mp3\");\n/* harmony import */ var _sounds_winAudio_mp3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../sounds/winAudio.mp3 */ \"./src/sounds/winAudio.mp3\");\n/* harmony import */ var _sounds_audioFlag_mp3__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../sounds/audioFlag.mp3 */ \"./src/sounds/audioFlag.mp3\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(0,_structure_js__WEBPACK_IMPORTED_MODULE_0__.drowTemplate)();\r\n(0,_dark_theme_js__WEBPACK_IMPORTED_MODULE_2__.changeTheme)();\r\nlet rows = 10;\r\nlet col = 10;\r\nlet mines = 10;\r\nlet boardArr = [];\r\nconst minesLocation = [];\r\nlet tilesClicked = 0;\r\nlet firstClick = 0;\r\nlet gameOver = false;\r\nlet timer = 0;\r\nlet timerInterval;\r\nconst second = document.querySelector('.sec');\r\nconst minute = document.querySelector('.min');\r\nconst boardBody = document.querySelector('.board__body');\r\nboardBody.style.width = `${20 * col + 20}px`;\r\nboardBody.oncontextmenu = () => false;\r\nconst overlay = document.querySelector('.opacity');\r\nconst gameSection = document.querySelector('.board');\r\nconst minesLeft = document.getElementById('mines-count');\r\nminesLeft.innerText = mines;\r\nconst flagsLeft = document.getElementById('flags-count');\r\nflagsLeft.innerText = mines;\r\nconst moves = document.querySelector('.header__moves');\r\nconst restartBtn = document.querySelectorAll('.button__restart');\r\nconst optionsBtn = document.querySelectorAll('.button__size');\r\nconst optionsPopUp = document.querySelector('.game-options__table');\r\nconst closeOptions = document.querySelector('.game-option_close');\r\nconst endPopUp = document.querySelector('.game-over');\r\nconst endMoves = document.querySelector('.game-over__moves');\r\n\r\nfunction getLocalStorage() {\r\n  if (!localStorage.getItem('openedCells')) {\r\n    createTiles(rows, col);\r\n  }\r\n\r\n  if (localStorage.getItem('openedCells')) {\r\n    const rows = +localStorage.getItem('rows');\r\n    const col = +localStorage.getItem('cols');\r\n    const mines = +localStorage.getItem('mines');\r\n    let minesLocation = (localStorage.getItem('minesLocation').split(','));\r\n    const savedTiles = JSON.parse(localStorage.getItem('openedCells'));\r\n    localStorage.setItem('rows', rows);\r\n    localStorage.setItem('cols', col);\r\n    localStorage.setItem('mines', mines);\r\n    boardBody.innerHTML = savedTiles;\r\n    const width = +localStorage.getItem('width');\r\n    boardBody.style.width = `${width}px`;\r\n    const timeSaved = +(localStorage.getItem('time'));\r\n    timer = timeSaved;\r\n    timerInterval = setInterval(() => {\r\n      timer += 1 / 60;\r\n      const secondVal = Math.floor(timer) - Math.floor(timer / 60) * 60;\r\n      const minuteVal = Math.floor(timer / 60);\r\n      second.innerHTML = secondVal < 10 ? `0${secondVal.toString()}` : secondVal;\r\n      minute.innerHTML = minuteVal < 10 ? `0${minuteVal.toString()}` : minuteVal;\r\n    }, 1000 / 60);\r\n    const clicks = localStorage.getItem('clicks');\r\n    firstClick = +clicks;\r\n    moves.innerHTML = `Moves: ${clicks}`;\r\n\r\n    minesLeft.innerHTML = localStorage.getItem('mines');\r\n    flagsLeft.innerText = localStorage.getItem('flags');\r\n    const tilesArr = [];\r\n\r\n    const copiedTiles = document.querySelectorAll('.board__tile');\r\n    copiedTiles.forEach((tile) => {\r\n      tile.addEventListener('contextmenu', tagFlag);\r\n      tile.addEventListener('click', openTile);\r\n      tile.addEventListener('click', playAudioTiles);\r\n      tilesArr.push(tile);\r\n    });\r\n    const n = col;\r\n    const size = Math.ceil(tilesArr.length / (n + 1));\r\n    boardArr = new Array(n).fill().map((_, i) => tilesArr.slice(i * size, i * size + size));\r\n\r\n    function openTile() {\r\n      if (gameOver || this.classList.contains('board__tile_clicked')) {\r\n        return;\r\n      }\r\n      const tile = this;\r\n      firstClick += 1;\r\n      localStorage.setItem('clicks', firstClick);\r\n      moves.innerHTML = `Moves: ${firstClick}`;\r\n      endMoves.innerText = firstClick;\r\n      if (firstClick === 1) {\r\n        startTimer();\r\n\r\n        function placeMines() {\r\n          minesLocation = (localStorage.getItem('minesLocation').split(','));\r\n        }\r\n        placeMines();\r\n      }\r\n      minesLocation = (localStorage.getItem('minesLocation').split(','));\r\n      if (minesLocation.includes(tile.id)) {\r\n        gameOver = true;\r\n        playAudioBomb();\r\n        showMines();\r\n        stopTimer();\r\n        gameOverLose();\r\n        firstClick = 0;\r\n        return;\r\n      }\r\n      const coordinates = tile.id.split('-');\r\n      const r = parseInt(coordinates[0]);\r\n      const c = parseInt(coordinates[1]);\r\n      checkMines(r, c);\r\n    }\r\n\r\n    function showMines() {\r\n      for (let i = 0; i < rows; i++) {\r\n        for (let k = 0; k < col; k++) {\r\n          const tile = boardArr[i][k];\r\n          if (minesLocation.includes(tile.id)) {\r\n            tile.innerText = '💣';\r\n            tile.style.backgroundColor = 'rgb(206, 61, 61)';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function checkMines(r, c) {\r\n      if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n        return;\r\n      }\r\n      if (boardArr[r][c].classList.contains('board__tile_clicked')) {\r\n        return;\r\n      }\r\n      boardArr[r][c].classList.add('board__tile_clicked');\r\n      tilesClicked += 1;\r\n\r\n      let minesFound = 0;\r\n      minesFound += checkTile(r - 1, c - 1); // top left\r\n      minesFound += checkTile(r - 1, c); // top\r\n      minesFound += checkTile(r - 1, c + 1); // top right\r\n      // left and right\r\n      minesFound += checkTile(r, c - 1); // left\r\n      minesFound += checkTile(r, c + 1); // right\r\n      // bottom\r\n      minesFound += checkTile(r + 1, c - 1); // left bottom\r\n      minesFound += checkTile(r + 1, c); // bottom\r\n      minesFound += checkTile(r + 1, c + 1); // right bottom\r\n\r\n      if (minesFound > 0) {\r\n        boardArr[r][c].innerText = minesFound;\r\n        boardArr[r][c].classList.add(`x${minesFound.toString()}`);\r\n      } else {\r\n        checkMines(r - 1, c - 1);\r\n        checkMines(r - 1, c);\r\n        checkMines(r - 1, c + 1);\r\n\r\n        checkMines(r, c - 1);\r\n        checkMines(r, c + 1);\r\n\r\n        checkMines(r + 1, c - 1);\r\n        checkMines(r + 1, c);\r\n        checkMines(r + 1, c + 1);\r\n      }\r\n\r\n      if (tilesClicked === rows * col - mines) {\r\n        document.getElementById('mines-count').innerText = 'None';\r\n        stopTimer();\r\n\r\n        gameOver = true;\r\n        gameOverWin();\r\n      }\r\n\r\n\r\n    }\r\n\r\n    function checkTile(r, c) {\r\n      if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n        return 0;\r\n      }\r\n      if (minesLocation.includes(`${r.toString()}-${c.toString()}`)) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    }\r\n  }\r\n}\r\nfunction createTiles(rows, col) {\r\n  for (let i = 0; i < rows; i++) {\r\n    const row = [];\r\n    for (let k = 0; k < col; k++) {\r\n      const tile = document.createElement('div');\r\n      tile.id = `${i.toString()}-${k.toString()}`;\r\n      tile.classList.add('board__tile');\r\n      if (localStorage.getItem('theme') === 'dark') {\r\n        tile.classList.add('dark');\r\n      }\r\n      boardBody.appendChild(tile);\r\n      tile.addEventListener('contextmenu', tagFlag);\r\n      tile.addEventListener('click', openTile);\r\n      tile.addEventListener('click', playAudioTiles);\r\n      row.push(tile);\r\n    }\r\n    boardArr.push(row);\r\n  }\r\n}\r\n\r\nfunction openTile() {\r\n  if (gameOver || this.classList.contains('board__tile_clicked')) {\r\n    return;\r\n  }\r\n  const tile = this;\r\n  firstClick += 1;\r\n  localStorage.setItem('clicks', firstClick);\r\n  moves.innerHTML = `Moves: ${firstClick}`;\r\n  endMoves.innerText = firstClick;\r\n\r\n  if (firstClick === 1) {\r\n    startTimer();\r\n    const firstTile = tile.id;\r\n    function placeMines() {\r\n      let minesLeft = mines;\r\n      while (minesLeft > 0) {\r\n        const r = Math.floor(Math.random() * rows);\r\n        const c = Math.floor(Math.random() * col);\r\n        const id = `${r.toString()}-${c.toString()}`;\r\n        if (!minesLocation.includes(id) && id !== firstTile) {\r\n          minesLocation.push(id);\r\n          minesLeft -= 1;\r\n        }\r\n        localStorage.setItem('minesLocation', minesLocation);\r\n      }\r\n    }\r\n    placeMines();\r\n  }\r\n  if (minesLocation.includes(tile.id)) {\r\n    gameOver = true;\r\n    playAudioBomb();\r\n    showMines();\r\n    stopTimer();\r\n    gameOverLose();\r\n    firstClick = 0;\r\n    return;\r\n  }\r\n  const coordinates = tile.id.split('-');\r\n  const r = parseInt(coordinates[0]);\r\n  const c = parseInt(coordinates[1]);\r\n  checkMines(r, c);\r\n}\r\nfunction showMines() {\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let k = 0; k < col; k++) {\r\n      const tile = boardArr[i][k];\r\n      if (minesLocation.includes(tile.id)) {\r\n        tile.innerText = '💣';\r\n        tile.style.backgroundColor = 'rgb(206, 61, 61)';\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction checkMines(r, c) {\r\n  if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n    return;\r\n  }\r\n  if (boardArr[r][c].classList.contains('board__tile_clicked')) {\r\n    return;\r\n  }\r\n  boardArr[r][c].classList.add('board__tile_clicked');\r\n  tilesClicked += 1;\r\n  let minesFound = 0;\r\n  minesFound += checkTile(r - 1, c - 1); // top left\r\n  minesFound += checkTile(r - 1, c); // top\r\n  minesFound += checkTile(r - 1, c + 1); // top right\r\n  // left and right\r\n  minesFound += checkTile(r, c - 1); // left\r\n  minesFound += checkTile(r, c + 1); // right\r\n  // bottom\r\n  minesFound += checkTile(r + 1, c - 1); // left bottom\r\n  minesFound += checkTile(r + 1, c); // bottom\r\n  minesFound += checkTile(r + 1, c + 1); // right bottom\r\n\r\n  if (minesFound > 0) {\r\n    boardArr[r][c].innerText = minesFound;\r\n    boardArr[r][c].classList.add(`x${minesFound.toString()}`);\r\n  } else {\r\n    checkMines(r - 1, c - 1);\r\n    checkMines(r - 1, c);\r\n    checkMines(r - 1, c + 1);\r\n\r\n    checkMines(r, c - 1);\r\n    checkMines(r, c + 1);\r\n\r\n    checkMines(r + 1, c - 1);\r\n    checkMines(r + 1, c);\r\n    checkMines(r + 1, c + 1);\r\n  }\r\n  if (tilesClicked === rows * col - mines) {\r\n    document.getElementById('mines-count').innerText = 'None';\r\n    stopTimer();\r\n    gameOver = true;\r\n    gameOverWin();\r\n  }\r\n}\r\nfunction checkTile(r, c) {\r\n  if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n    return 0;\r\n  }\r\n  if (minesLocation.includes(`${r.toString()}-${c.toString()}`)) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nwindow.addEventListener('load', getLocalStorage);\r\n\r\ncloseOptions.onclick = () => {\r\n  clearStorage();\r\n  stopTimer();\r\n  gameSection.classList.add('changed-game');\r\n  overlay.classList.remove('active');\r\n  overlay.classList.remove('options-opened');\r\n\r\n  optionsPopUp.classList.remove('active');\r\n  closeOptions.classList.remove('active');\r\n  document.querySelector('.game-options').classList.remove('active');\r\n\r\n  const boardArr = [];\r\n  const minesLocation = [];\r\n  let tilesClicked = 0;\r\n  let firstClick = 0;\r\n  let gameOver = false;\r\n\r\n  const radios = document.getElementsByName('difficulty');\r\n  const selected = Array.from(radios).find((radio) => radio.checked);\r\n  const val = selected.value;\r\n\r\n  if (val === 'custom') {\r\n    col = document.getElementById(`height-input_${val}`).value;\r\n    rows = document.getElementById(`width-input_${val}`).value;\r\n    mines = document.getElementById(`mines-input_${val}`).value;\r\n    if (mines === '' || mines === undefined || mines === null) {\r\n      alert('Укажите количество мин');\r\n    }\r\n\r\n    boardBody.innerHTML = '';\r\n    moves.innerText = 'Moves: 0';\r\n  }\r\n  if (val !== 'custom') {\r\n    col = document.getElementById(`height-input_${val}`).innerText;\r\n    rows = document.getElementById(`width-input_${val}`).innerText;\r\n    mines = document.getElementById(`mines-input_${val}`).value;\r\n    boardBody.innerHTML = '';\r\n    moves.innerText = 'Moves: 0';\r\n    if (mines === '' || mines === undefined || mines === null) {\r\n      alert('Укажите количество мин');\r\n    }\r\n\r\n  }\r\n\r\n  minesLeft.innerText = mines;\r\n  flagsLeft.innerText = mines;\r\n\r\n  createTiles(rows, col);\r\n  function createTiles(rows, col) {\r\n    for (let i = 0; i < rows; i++) {\r\n      const row = [];\r\n      for (let k = 0; k < col; k++) {\r\n        const tile = document.createElement('div');\r\n        tile.id = `${i.toString()}-${k.toString()}`;\r\n        tile.classList.add('board__tile');\r\n        if (localStorage.getItem('theme') === 'dark') {\r\n          tile.classList.add('dark');\r\n        }\r\n        boardBody.appendChild(tile);\r\n        tile.addEventListener('contextmenu', tagFlag);\r\n        tile.addEventListener('click', openTile);\r\n        tile.addEventListener('click', playAudioTiles);\r\n        row.push(tile);\r\n     \r\n\r\n      }\r\n      boardArr.push(row);\r\n\r\n    }\r\n  }\r\n  const allTiles =document.querySelectorAll('.board__tile');\r\n  if (+col>=25){\r\n    allTiles.forEach(tile =>{\r\n      tile.style.width = `16px`;\r\n      tile.style.height = `16px`\r\n      boardBody.style.width = `${18 * col}px`; \r\n    })\r\n  }\r\n  else{\r\n    boardBody.style.width = `${22 * col}px`; \r\n  }\r\n \r\n\r\n\r\n  function openTile() {\r\n    if (gameOver || this.classList.contains('board__tile_clicked')) {\r\n      return;\r\n    }\r\n    const tile = this;\r\n    firstClick += 1;\r\n    localStorage.setItem('clicks', firstClick);\r\n    moves.innerHTML = `Moves: ${firstClick}`;\r\n    endMoves.innerText = firstClick;\r\n    if (firstClick === 1) {\r\n      startTimer();\r\n      const firstTile = tile.id;\r\n      function placeMines() {\r\n        let minesLeft = mines;\r\n        while (minesLeft > 0) {\r\n          const r = Math.floor(Math.random() * rows);\r\n          const c = Math.floor(Math.random() * col);\r\n          const id = `${r.toString()}-${c.toString()}`;\r\n          if (!minesLocation.includes(id) && id !== firstTile) {\r\n            minesLocation.push(id);\r\n            minesLeft -= 1;\r\n          }\r\n        }\r\n        localStorage.setItem('minesLocation', minesLocation);\r\n      }\r\n      placeMines();\r\n    }\r\n\r\n    if (minesLocation.includes(tile.id)) {\r\n      gameOver = true;\r\n      playAudioBomb();\r\n      showMines();\r\n      gameOverLose();\r\n      stopTimer();\r\n      firstClick = 0;\r\n      return;\r\n    }\r\n    const coordinates = tile.id.split('-');\r\n    const r = parseInt(coordinates[0]);\r\n    const c = parseInt(coordinates[1]);\r\n    checkMines(r, c);\r\n  }\r\n  function showMines() {\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let k = 0; k < col; k++) {\r\n        const tile = boardArr[i][k];\r\n        if (minesLocation.includes(tile.id)) {\r\n          tile.innerText = '💣';\r\n          tile.style.backgroundColor = 'rgb(206, 61, 61)';\r\n        }\r\n      }\r\n    }\r\n  }\r\n  function checkMines(r, c) {\r\n    if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n      return;\r\n    }\r\n    if (boardArr[r][c].classList.contains('board__tile_clicked')) {\r\n      return;\r\n    }\r\n    boardArr[r][c].classList.add('board__tile_clicked');\r\n    tilesClicked += 1;\r\n\r\n    let minesFound = 0;\r\n    minesFound += checkTile(r - 1, c - 1); // top left\r\n    minesFound += checkTile(r - 1, c); // top\r\n    minesFound += checkTile(r - 1, c + 1); // top right\r\n    // left and right\r\n    minesFound += checkTile(r, c - 1); // left\r\n    minesFound += checkTile(r, c + 1); // right\r\n    // bottom\r\n    minesFound += checkTile(r + 1, c - 1); // left bottom\r\n    minesFound += checkTile(r + 1, c); // bottom\r\n    minesFound += checkTile(r + 1, c + 1); // right bottom\r\n\r\n    if (minesFound > 0) {\r\n      boardArr[r][c].innerText = minesFound;\r\n      boardArr[r][c].classList.add(`x${minesFound.toString()}`);\r\n    } else {\r\n      checkMines(r - 1, c - 1);\r\n      checkMines(r - 1, c);\r\n      checkMines(r - 1, c + 1);\r\n\r\n      checkMines(r, c - 1);\r\n      checkMines(r, c + 1);\r\n\r\n      checkMines(r + 1, c - 1);\r\n      checkMines(r + 1, c);\r\n      checkMines(r + 1, c + 1);\r\n    }\r\n\r\n    if (tilesClicked === rows * col - mines) {\r\n      document.getElementById('mines-count').innerText = 'None';\r\n      stopTimer();\r\n      gameOver = true;\r\n      gameOverWin();\r\n    }\r\n  }\r\n  function checkTile(r, c) {\r\n    if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n      return 0;\r\n    }\r\n    if (minesLocation.includes(`${r.toString()}-${c.toString()}`)) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n};\r\nrestartBtn.forEach((restart) => {\r\n  restart.addEventListener('click', () => {\r\n    clearStorage();\r\n    endPopUp.classList.remove('active');\r\n    overlay.classList.remove('active');\r\n    stopTimer();\r\n    if (gameSection.classList.contains('changed-game')) {\r\n      boardArr = [];\r\n      const minesLocation = [];\r\n      tilesClicked = 0;\r\n      firstClick = 0;\r\n      gameOver = false;\r\n      boardBody.innerHTML = '';\r\n      moves.innerText = 'Moves: 0';\r\n\r\n      boardBody.style.width = `${22 * col}px`;\r\n      minesLeft.innerText = mines;\r\n      flagsLeft.innerText = mines;\r\n\r\n      createTiles(rows, col);\r\n\r\n      function createTiles(rows, col) {\r\n        for (let i = 0; i < rows; i++) {\r\n          const row = [];\r\n          for (let k = 0; k < col; k++) {\r\n            const tile = document.createElement('div');\r\n            tile.id = `${i.toString()}-${k.toString()}`;\r\n            tile.classList.add('board__tile');\r\n            if (localStorage.getItem('theme') === 'dark') {\r\n              tile.classList.add('dark');\r\n            }\r\n            boardBody.appendChild(tile);\r\n            tile.addEventListener('contextmenu', tagFlag);\r\n            tile.addEventListener('click', openTile);\r\n            tile.addEventListener('click', playAudioTiles);\r\n            row.push(tile);\r\n          }\r\n          boardArr.push(row);\r\n        }\r\n      }\r\n\r\n      function openTile() {\r\n        if (gameOver || this.classList.contains('board__tile_clicked')) {\r\n          return;\r\n        }\r\n        const tile = this;\r\n        firstClick += 1;\r\n        localStorage.setItem('clicks', firstClick);\r\n        moves.innerHTML = `Moves: ${firstClick}`;\r\n\r\n        endMoves.innerText = firstClick;\r\n        if (firstClick === 1) {\r\n          startTimer();\r\n          const firstTile = tile.id;\r\n          function placeMines() {\r\n            let minesLeft = mines;\r\n            while (minesLeft > 0) {\r\n              const r = Math.floor(Math.random() * rows);\r\n              const c = Math.floor(Math.random() * col);\r\n              const id = `${r.toString()}-${c.toString()}`;\r\n              if (!minesLocation.includes(id) && id !== firstTile) {\r\n                minesLocation.push(id);\r\n                minesLeft -= 1;\r\n              }\r\n              localStorage.setItem('minesLocation', minesLocation);\r\n            }\r\n          }\r\n          placeMines();\r\n        }\r\n\r\n        if (minesLocation.includes(tile.id)) {\r\n          gameOver = true;\r\n          playAudioBomb();\r\n          showMines();\r\n          stopTimer();\r\n          gameOverLose();\r\n          firstClick = 0;\r\n          return;\r\n        }\r\n        const coordinates = tile.id.split('-');\r\n        const r = parseInt(coordinates[0]);\r\n        const c = parseInt(coordinates[1]);\r\n        checkMines(r, c);\r\n      }\r\n      function showMines() {\r\n        for (let i = 0; i < rows; i++) {\r\n          for (let k = 0; k < col; k++) {\r\n            const tile = boardArr[i][k];\r\n            if (minesLocation.includes(tile.id)) {\r\n              tile.innerText = '💣';\r\n              tile.style.backgroundColor = 'rgb(206, 61, 61)';\r\n            }\r\n          }\r\n        }\r\n      }\r\n      function checkMines(r, c) {\r\n        if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n          return;\r\n        }\r\n        if (boardArr[r][c].classList.contains('board__tile_clicked')) {\r\n          return;\r\n        }\r\n        boardArr[r][c].classList.add('board__tile_clicked');\r\n        tilesClicked += 1;\r\n        let minesFound = 0;\r\n        minesFound += checkTile(r - 1, c - 1); // top left\r\n        minesFound += checkTile(r - 1, c); // top\r\n        minesFound += checkTile(r - 1, c + 1); // top right\r\n        // left and right\r\n        minesFound += checkTile(r, c - 1); // left\r\n        minesFound += checkTile(r, c + 1); // right\r\n        // bottom\r\n        minesFound += checkTile(r + 1, c - 1); // left bottom\r\n        minesFound += checkTile(r + 1, c); // bottom\r\n        minesFound += checkTile(r + 1, c + 1); // right bottom\r\n\r\n        if (minesFound > 0) {\r\n          boardArr[r][c].innerText = minesFound;\r\n          boardArr[r][c].classList.add(`x${minesFound.toString()}`);\r\n        } else {\r\n          checkMines(r - 1, c - 1);\r\n          checkMines(r - 1, c);\r\n          checkMines(r - 1, c + 1);\r\n\r\n          checkMines(r, c - 1);\r\n          checkMines(r, c + 1);\r\n\r\n          checkMines(r + 1, c - 1);\r\n          checkMines(r + 1, c);\r\n          checkMines(r + 1, c + 1);\r\n        }\r\n\r\n        if (tilesClicked === rows * col - mines) {\r\n          document.getElementById('mines-count').innerText = 'None';\r\n          stopTimer();\r\n          gameOver = true;\r\n          gameOverWin();\r\n        }\r\n      }\r\n      function checkTile(r, c) {\r\n        if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n          return 0;\r\n        }\r\n        if (minesLocation.includes(`${r.toString()}-${c.toString()}`)) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    if (!gameSection.classList.contains('changed-game')) {\r\n      const rows = 10;\r\n      const col = 10;\r\n      const mines = 10;\r\n      const boardArr = [];\r\n      const minesLocation = [];\r\n      let tilesClicked = 0;\r\n      let firstClick = 0;\r\n      let gameOver = false;\r\n\r\n      boardBody.innerHTML = '';\r\n      moves.innerText = 'Moves: 0';\r\n\r\n      boardBody.style.width = `${22 * col}px`;\r\n      minesLeft.innerText = mines;\r\n      flagsLeft.innerText = mines;\r\n\r\n      createTiles(rows, col);\r\n\r\n      function createTiles(rows, col) {\r\n        for (let i = 0; i < rows; i++) {\r\n          const row = [];\r\n          for (let k = 0; k < col; k++) {\r\n            const tile = document.createElement('div');\r\n            tile.id = `${i.toString()}-${k.toString()}`;\r\n            tile.classList.add('board__tile');\r\n            if (localStorage.getItem('theme') === 'dark') {\r\n              tile.classList.add('dark');\r\n            }\r\n            boardBody.appendChild(tile);\r\n            tile.addEventListener('contextmenu', tagFlag);\r\n            tile.addEventListener('click', openTile);\r\n            tile.addEventListener('click', playAudioTiles);\r\n            row.push(tile);\r\n          }\r\n          boardArr.push(row);\r\n        }\r\n      }\r\n\r\n      function openTile() {\r\n        if (gameOver || this.classList.contains('board__tile_clicked')) {\r\n          return;\r\n        }\r\n        const tile = this;\r\n        firstClick += 1;\r\n        localStorage.setItem('clicks', firstClick);\r\n        moves.innerHTML = `Moves: ${firstClick}`;\r\n\r\n        endMoves.innerText = firstClick;\r\n        if (firstClick === 1) {\r\n          startTimer();\r\n          const firstTile = tile.id;\r\n          function placeMines() {\r\n            let minesLeft = mines;\r\n            while (minesLeft > 0) {\r\n              const r = Math.floor(Math.random() * rows);\r\n              const c = Math.floor(Math.random() * col);\r\n              const id = `${r.toString()}-${c.toString()}`;\r\n              if (!minesLocation.includes(id) && id !== firstTile) {\r\n                minesLocation.push(id);\r\n                minesLeft -= 1;\r\n              }\r\n              localStorage.setItem('minesLocation', minesLocation);\r\n            }\r\n          }\r\n          placeMines();\r\n        }\r\n\r\n        if (minesLocation.includes(tile.id)) {\r\n          gameOver = true;\r\n          playAudioBomb();\r\n          showMines();\r\n          stopTimer();\r\n          gameOverLose();\r\n          firstClick = 0;\r\n          return;\r\n        }\r\n        const coordinates = tile.id.split('-');\r\n        const r = parseInt(coordinates[0]);\r\n        const c = parseInt(coordinates[1]);\r\n        checkMines(r, c);\r\n      }\r\n      function showMines() {\r\n        for (let i = 0; i < rows; i++) {\r\n          for (let k = 0; k < col; k++) {\r\n            const tile = boardArr[i][k];\r\n            if (minesLocation.includes(tile.id)) {\r\n              tile.innerText = '💣';\r\n              tile.style.backgroundColor = 'rgb(206, 61, 61)';\r\n            }\r\n          }\r\n        }\r\n      }\r\n      function checkMines(r, c) {\r\n        if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n          return;\r\n        }\r\n        if (boardArr[r][c].classList.contains('board__tile_clicked')) {\r\n          return;\r\n        }\r\n        boardArr[r][c].classList.add('board__tile_clicked');\r\n        tilesClicked += 1;\r\n        let minesFound = 0;\r\n        minesFound += checkTile(r - 1, c - 1); // top left\r\n        minesFound += checkTile(r - 1, c); // top\r\n        minesFound += checkTile(r - 1, c + 1); // top right\r\n        // left and right\r\n        minesFound += checkTile(r, c - 1); // left\r\n        minesFound += checkTile(r, c + 1); // right\r\n        // bottom\r\n        minesFound += checkTile(r + 1, c - 1); // left bottom\r\n        minesFound += checkTile(r + 1, c); // bottom\r\n        minesFound += checkTile(r + 1, c + 1); // right bottomlocal\r\n        if (minesFound > 0) {\r\n          boardArr[r][c].innerText = minesFound;\r\n          boardArr[r][c].classList.add(`x${minesFound.toString()}`);\r\n        } else {\r\n          checkMines(r - 1, c - 1);\r\n          checkMines(r - 1, c);\r\n          checkMines(r - 1, c + 1);\r\n\r\n          checkMines(r, c - 1);\r\n          checkMines(r, c + 1);\r\n\r\n          checkMines(r + 1, c - 1);\r\n          checkMines(r + 1, c);\r\n          checkMines(r + 1, c + 1);\r\n        }\r\n\r\n        if (tilesClicked === rows * col - mines) {\r\n          document.getElementById('mines-count').innerText = 'None';\r\n          stopTimer();\r\n          gameOver = true;\r\n          gameOverWin();\r\n        }\r\n      }\r\n      function checkTile(r, c) {\r\n        if (r < 0 || r >= rows || c < 0 || c >= col) {\r\n          return 0;\r\n        }\r\n        if (minesLocation.includes(`${r.toString()}-${c.toString()}`)) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\nfunction startTimer() {\r\n  stopTimer();\r\n  timerInterval = setInterval(() => {\r\n    timer += 1 / 60;\r\n    const secondVal = Math.floor(timer) - Math.floor(timer / 60) * 60;\r\n    const minuteVal = Math.floor(timer / 60);\r\n    second.innerHTML = secondVal < 10 ? `0${secondVal.toString()}` : secondVal;\r\n    minute.innerHTML = minuteVal < 10 ? `0${minuteVal.toString()}` : minuteVal;\r\n  }, 1000 / 60);\r\n}\r\nlet timePlayed;\r\nfunction stopTimer() {\r\n  clearInterval(timerInterval);\r\n  timePlayed = `${minute.innerHTML}:${second.innerHTML}`;\r\n  second.innerHTML = '00';\r\n  minute.innerHTML = '00';\r\n  timer = 0;\r\n}\r\nwindow.onresize = () => {\r\n  (0,_limit_inputs_js__WEBPACK_IMPORTED_MODULE_1__.limitNumberInputs)();\r\n};\r\n(0,_limit_inputs_js__WEBPACK_IMPORTED_MODULE_1__.limitNumberInputs)();\r\n\r\nfunction gameOverLose() {\r\n  playAudioLose();\r\n  const endPopUp = document.querySelector('.game-over');\r\n  endPopUp.classList.add('active');\r\n  overlay.classList.add('active');\r\n\r\n  const loseElem = document.querySelectorAll('.lose');\r\n  loseElem.forEach((elem) => {\r\n    elem.style.display = 'block';\r\n  });\r\n  const winElem = document.querySelectorAll('.win');\r\n  winElem.forEach((elem) => {\r\n    elem.style.display = 'none';\r\n  });\r\n}\r\nlet player = {};\r\n\r\nfunction gameOverWin() {\r\n  playAudioWin();\r\n  const endPopUp = document.querySelector('.game-over');\r\n  const endTime = document.querySelector('.game-over__time');\r\n\r\n  endPopUp.classList.add('active');\r\n  overlay.classList.add('active');\r\n  endTime.innerText = timePlayed;\r\n  if (firstClick === 0) {\r\n    firstClick += 1;\r\n  }\r\n  player = {\r\n    size: `${col}X${rows}`,\r\n    moves: endMoves.innerText,\r\n    time: endTime.innerText,\r\n\r\n  };\r\n\r\n  const loseElem = document.querySelectorAll('.lose');\r\n  loseElem.forEach((elem) => {\r\n    elem.style.display = 'none';\r\n  });\r\n  const winElem = document.querySelectorAll('.win');\r\n  winElem.forEach((elem) => {\r\n    elem.style.display = 'block';\r\n  });\r\n\r\n  savePlayerName.forEach((btn) => {\r\n    btn.addEventListener('click', savePlayerResults);\r\n  });\r\n}\r\n\r\nconst soundBtn = document.querySelector('.button__sound');\r\nconst soundMode = document.querySelector('.button__sound_mode');\r\nconst soundStorage = localStorage.getItem('sound');\r\nif (soundStorage === 'off') {\r\n  soundMode.classList.remove('on');\r\n  soundMode.classList.add('off');\r\n  soundMode.innerText = 'Off';\r\n} else if (soundStorage === 'on') {\r\n  soundMode.classList.remove('off');\r\n  soundMode.classList.add('on');\r\n  soundMode.innerText = 'On';\r\n}\r\nsoundBtn.addEventListener('click', soundChange);\r\nfunction soundChange() {\r\n  if (soundMode.classList.contains('on')) {\r\n    soundMode.classList.remove('on');\r\n    soundMode.classList.add('off');\r\n    soundMode.innerText = 'Off';\r\n  } else if (soundMode.classList.contains('off')) {\r\n    soundMode.classList.remove('off');\r\n    soundMode.classList.add('on');\r\n    soundMode.innerText = 'On';\r\n  }\r\n  localStorage.setItem('sound', soundMode.classList[1]);\r\n}\r\n\r\nconst audioClick = new Audio();\r\nfunction playAudioTiles() {\r\n  audioClick.src = _sounds_clickAudio_mp3__WEBPACK_IMPORTED_MODULE_3__;\r\n  audioClick.currentTime = 0;\r\n  if (soundMode.classList.contains('on')) {\r\n    audioClick.play();\r\n  }\r\n  if (soundMode.classList.contains('off')) {\r\n    audioClick.pause();\r\n  }\r\n}\r\nconst audioBomb = new Audio();\r\nfunction playAudioBomb() {\r\n  audioBomb.src = _sounds_bombAudio_mp3__WEBPACK_IMPORTED_MODULE_4__;\r\n  audioBomb.currentTime = 0;\r\n  if (soundMode.classList.contains('on')) {\r\n    audioBomb.play();\r\n  }\r\n  if (soundMode.classList.contains('off')) {\r\n    audioBomb.pause();\r\n  }\r\n}\r\nconst audioLose = new Audio();\r\nfunction playAudioLose() {\r\n  audioLose.src = _sounds_loseAudio_mp3__WEBPACK_IMPORTED_MODULE_5__;\r\n  audioLose.currentTime = 0;\r\n  if (soundMode.classList.contains('on')) {\r\n    audioLose.play();\r\n  }\r\n  if (soundMode.classList.contains('off')) {\r\n    audioLose.pause();\r\n  }\r\n}\r\nconst audioWin = new Audio();\r\nfunction playAudioWin() {\r\n  audioWin.src = _sounds_winAudio_mp3__WEBPACK_IMPORTED_MODULE_6__;\r\n  audioWin.currentTime = 0;\r\n  if (soundMode.classList.contains('on')) {\r\n    audioWin.play();\r\n  }\r\n  if (soundMode.classList.contains('off')) {\r\n    audioWin.pause();\r\n  }\r\n}\r\nconst audioFlag = new Audio();\r\nfunction playAudioFlag() {\r\n  audioFlag.src = _sounds_audioFlag_mp3__WEBPACK_IMPORTED_MODULE_7__;\r\n  audioFlag.currentTime = 0;\r\n  if (soundMode.classList.contains('on')) {\r\n    audioFlag.play();\r\n  }\r\n  if (soundMode.classList.contains('off')) {\r\n    audioFlag.pause();\r\n  }\r\n}\r\n\r\n\r\n\r\nconst saveBtn = document.querySelector('.button__save');\r\nsaveBtn.addEventListener('click', setLocalStorage);\r\nsaveBtn.classList.add('has-saves');\r\n\r\nfunction setLocalStorage() {\r\n  localStorage.setItem('openedCells', JSON.stringify(boardBody.innerHTML));\r\n  localStorage.setItem('time', timer);\r\n  localStorage.setItem('mines', mines);\r\n  localStorage.setItem('flags', flagsLeft.innerText);\r\n  localStorage.setItem('rows', rows);\r\n  localStorage.setItem('cols', col);\r\n  localStorage.setItem('boardArr', JSON.stringify(boardArr));\r\n  localStorage.setItem('width', +boardBody.style.width.replace(/[^0-9]/g, ''));\r\n}\r\n\r\nconst bigArr = [\r\n  {\r\n    name: 'Player1',\r\n    size: '10X10',\r\n    moves: '8',\r\n    time: '00:15',\r\n  },\r\n  {\r\n    name: 'ninsya',\r\n    size: '10X10',\r\n    moves: '10',\r\n    time: '00:21',\r\n  },\r\n  {\r\n    name: 'Anonim',\r\n    size: '15X15',\r\n    moves: '7',\r\n    time: '00:13',\r\n  },\r\n  {\r\n    name: 'vitya',\r\n    size: '10X10',\r\n    moves: '5',\r\n    time: '00:10',\r\n  },\r\n  {\r\n    name: 'No_name',\r\n    size: '10X10',\r\n    moves: '9',\r\n    time: '00:27',\r\n  },\r\n  {\r\n    name: 'katya',\r\n    size: '10X10',\r\n    moves: '1',\r\n    time: '00:02',\r\n  },\r\n  {\r\n    name: 'iamsexy',\r\n    size: '15X15',\r\n    moves: '9',\r\n    time: '00:17',\r\n  },\r\n  {\r\n    name: 'toma',\r\n    size: '10X10',\r\n    moves: '5',\r\n    time: '00:10',\r\n  },\r\n  {\r\n    name: 'No_name',\r\n    size: '10X10',\r\n    moves: '9',\r\n    time: '00:27',\r\n  },\r\n  {\r\n    name: 'fox',\r\n    size: '15X15',\r\n    moves: '10',\r\n    time: '00:15',\r\n  },\r\n];\r\nconst settingsIcon = document.querySelector('#settingsBtn');\r\nsettingsIcon.addEventListener('click', openSettings);\r\nconst settngsModal = document.querySelector('.settings__buttons');\r\nconst state = localStorage.getItem('settings');\r\nif (state === 'active') {\r\n  settngsModal.classList.add('active');\r\n}\r\nfunction openSettings() {\r\n  settngsModal.classList.toggle('active');\r\n  localStorage.setItem('settings', settngsModal.classList[1]);\r\n}\r\n\r\nconst savePlayerName = document.querySelectorAll('.get-result');\r\nlet playerName;\r\nconst playerNameInput = document.querySelector('.game-over__input');\r\n\r\nplayerNameInput.addEventListener('change', () => {\r\n  if (playerNameInput !== null || playerNameInput !== undefined) {\r\n    playerName = playerNameInput.value;\r\n  }\r\n});\r\n\r\nfunction savePlayerResults() {\r\n  if (playerName === undefined || playerName === '') {\r\n    playerName = 'No_name';\r\n  }\r\n  player.name = playerName;\r\n  if (bigArr.length < 10) {\r\n    bigArr.push(player);\r\n  }\r\n  if (bigArr.length >= 10) {\r\n    bigArr.shift();\r\n    bigArr.push(player);\r\n  }\r\n\r\n  localStorage.setItem('results', JSON.stringify(bigArr));\r\n\r\n  playerNameInput.value = '';\r\n  playerName = '';\r\n}\r\n\r\nconst resultsBtn = document.querySelector('.button__results ');\r\nresultsBtn.addEventListener('click', openResults);\r\n\r\nfunction openResults() {\r\n  overlay.classList.add('active');\r\n  const results = JSON.parse(localStorage.getItem('results'));\r\n  document.querySelector('.results__modal').classList.add('active');\r\n\r\n  if (document.querySelector('.results__modal').classList.contains('active')) {\r\n    generateResults();\r\n  }\r\n\r\n  function generateResults() {\r\n    const colNames = document.createElement('div');\r\n    colNames.className = 'results__cols cols';\r\n    colNames.innerHTML = `\r\n    <div class=\"cols__item line_number\">№</div>\r\n  <div class=\"cols__item\">Player</div>\r\n  <div class=\"cols__item\">Field</div>\r\n  <div class=\"cols__item\"> Moves</div>\r\n  <div class=\"cols__item\"> Time</div>\r\n  `;\r\n    document.querySelector('.results__modal').appendChild(colNames);\r\n    let i = 0;\r\n    results.map(({\r\n      name, size, moves, time,\r\n    }) => {\r\n      const elem = document.createElement('div');\r\n      elem.className = 'results__line line';\r\n      elem.innerHTML = `<div class=\"line_number item\">${i += 1}</div>\r\n        <div class=\"line_name item\">${name}</div>\r\n        <div class=\"line_size item\">${size}</div>\r\n        <div class=\"line_moves item\">${moves}</div>\r\n        <div class=\"line_time item\">${time}</div>\r\n  `;\r\n      document.querySelector('.results__modal').appendChild(elem);\r\n      return elem;\r\n    });\r\n  }\r\n}\r\noverlay.addEventListener('click', () => {\r\n  if (!overlay.classList.contains('options-opened')) {\r\n    document.querySelector('.results__modal').classList.remove('active');\r\n    overlay.classList.remove('active');\r\n    document.querySelector('.results__modal').innerHTML = '';\r\n  }\r\n});\r\ndocument.querySelector('.results__modal').addEventListener('click', () => {\r\n  document.querySelector('.results__modal').classList.remove('active');\r\n  overlay.classList.remove('active');\r\n  document.querySelector('.results__modal').innerHTML = '';\r\n});\r\n\r\nfunction clearStorage() {\r\n  localStorage.removeItem('minesLocation');\r\n  localStorage.removeItem('openedCells');\r\n  localStorage.removeItem('clicks');\r\n  localStorage.removeItem('rows');\r\n  localStorage.removeItem('flags');\r\n  localStorage.removeItem('mines');\r\n  localStorage.removeItem('cols');\r\n  localStorage.removeItem('boardArr');\r\n  localStorage.removeItem('time');\r\n}\r\nwindow.addEventListener('beforeunload', () => {\r\n  localStorage.setItem('results', JSON.stringify(bigArr));\r\n});\r\n\r\nfunction tagFlag() {\r\n  const tile = this;\r\n  playAudioFlag()\r\n  if (tile.innerText === '' && +(flagsLeft.innerText) > 0) {\r\n    tile.innerText = '🚩';\r\n    flagsLeft.innerText = +(flagsLeft.innerText) - 1;\r\n  } else if (tile.innerText === '🚩') {\r\n    tile.innerText = '';\r\n    flagsLeft.innerText = +(flagsLeft.innerText) + 1;\r\n  }\r\n}\r\n\r\n\r\noptionsBtn.forEach((options) => {\r\n  options.addEventListener('click', () => {\r\n    openPopUP();\r\n    endPopUp.classList.remove('active');\r\n  });\r\n});\r\n\r\nfunction openPopUP() {\r\n  document.querySelector('.game-options').classList.add('active');\r\n  optionsPopUp.classList.add('active');\r\n  overlay.classList.add('active');\r\n  overlay.classList.add('options-opened');\r\n  closeOptions.classList.add('active');\r\n}\r\n\r\n\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/js/combine.js?");

/***/ }),

/***/ "./src/js/dark-theme.js":
/*!******************************!*\
  !*** ./src/js/dark-theme.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   changeTheme: () => (/* binding */ changeTheme)\n/* harmony export */ });\nfunction changeTheme() {\r\n  document.querySelector('.button__change-theme').addEventListener('click', (event) => {\r\n    event.preventDefault();\r\n    if (localStorage.getItem('theme') === 'dark') {\r\n      localStorage.removeItem('theme');\r\n    } else {\r\n      localStorage.setItem('theme', 'dark');\r\n    }\r\n    addDarkClassToHTML();\r\n  });\r\n\r\n  function addDarkClassToHTML() {\r\n    if (localStorage.getItem('theme') === 'dark') {\r\n      document.querySelector('html').classList.add('dark');\r\n      document.querySelector('.board__body').classList.add('dark');\r\n      document.querySelector('.table__body').classList.add('dark');\r\n      document.querySelector('.results__modal').classList.add('dark');\r\n\r\n      document.querySelectorAll('button').forEach((btn) => {\r\n        btn.classList.add('dark');\r\n      });\r\n      document.querySelectorAll('.board__tile').forEach((tile) => {\r\n        tile.classList.add('dark');\r\n      });\r\n      document.querySelector('.game-over__info').classList.add('dark');\r\n      document.querySelector('.button__change-theme span').textContent = 'dark_mode';\r\n    } else {\r\n      document.querySelector('html').classList.remove('dark');\r\n      document.querySelector('.board__body').classList.remove('dark');\r\n      document.querySelector('.table__body').classList.remove('dark');\r\n      document.querySelector('.results__modal').classList.remove('dark');\r\n      document.querySelectorAll('button').forEach((btn) => {\r\n        btn.classList.remove('dark');\r\n      });\r\n      document.querySelectorAll('.board__tile').forEach((tile) => {\r\n        tile.classList.remove('dark');\r\n      });\r\n      document.querySelector('.game-over__info').classList.remove('dark');\r\n\r\n      document.querySelector('.button__change-theme span').textContent = 'wb_sunny';\r\n    }\r\n  }\r\n\r\n  addDarkClassToHTML();\r\n}\r\n\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/js/dark-theme.js?");

/***/ }),

/***/ "./src/js/limit-inputs.js":
/*!********************************!*\
  !*** ./src/js/limit-inputs.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   limitNumberInputs: () => (/* binding */ limitNumberInputs)\n/* harmony export */ });\n\r\nfunction limitNumberInputs() {\r\n  const maxColumnCount = innerWidth / 23 | 0;\r\n  const settingsSection = document.querySelector('.settings');\r\n  const maxRowCount = (innerHeight - settingsSection.offsetHeight - 150) / 23 | 0;\r\n  const widthInput = document.querySelector('#height-input_custom');\r\n  const heightInput = document.querySelector('#width-input_custom');\r\n  const mineCountInput = document.querySelector('#mines-input_custom');\r\n  widthInput.max = maxColumnCount;\r\n  heightInput.max = maxRowCount;\r\n  mineCountInput.max = maxColumnCount * maxRowCount - 1;\r\n  widthInput.placeholder = `10 - ${widthInput.max}`;\r\n  heightInput.placeholder = `10- ${heightInput.max}`;\r\n  widthInput.onchange = () => {\r\n    if (widthInput.value > maxColumnCount) widthInput.value = maxColumnCount;\r\n    mineCountInput.placeholder = `10 - ${widthInput.value * heightInput.value - 1}`;\r\n  };\r\n  heightInput.onchange = () => {\r\n    if (heightInput.value > maxRowCount) heightInput.value = maxRowCount;\r\n    mineCountInput.placeholder = `10 - ${widthInput.value * heightInput.value - 1}`;\r\n  };\r\n\r\n  mineCountInput.placeholder = `10 - ${widthInput.value * heightInput.value - 1}`;\r\n\r\n  if (widthInput.value > maxColumnCount) widthInput.value = maxColumnCount;\r\n  if (heightInput.value > maxRowCount) heightInput.value = maxRowCount;\r\n  if (mineCountInput.value > maxColumnCount * maxRowCount - 1) {\r\n    mineCountInput.value = maxColumnCount * maxRowCount - 1;\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/js/limit-inputs.js?");

/***/ }),

/***/ "./src/js/structure.js":
/*!*****************************!*\
  !*** ./src/js/structure.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drowTemplate: () => (/* binding */ drowTemplate)\n/* harmony export */ });\n/* harmony import */ var _img_lose_img_png__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../img/lose-img.png */ \"./src/img/lose-img.png\");\n/* harmony import */ var _img_win_img_png__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../img/win-img.png */ \"./src/img/win-img.png\");\n\r\n\r\n\r\n\r\n\r\nfunction drowTemplate() {\r\n  const { body } = document;\r\n  const wrapper = document.createElement('div');\r\n  wrapper.className = 'wrapper';\r\n  wrapper.innerHTML = `\r\n \r\n  <section class=\"settings\">\r\n    <div class=\"material-symbols-outlined\" id=\"settingsBtn\">settings</div>\r\n    <div class=\"settings__buttons\">\r\n      <button class=\"button__sound button\" type=\"button\">Sound\r\n        <span class=\"button__sound_mode on\"> On</span>\r\n      </button>\r\n      <button class=\"button__save button\" type=\"button\">Save game</button>\r\n      <button href=\"#\" class=\"button__change-theme button\">\r\n        <span class=\"material-symbols-outlined\">\r\n          dark_mode\r\n        </span>\r\n      </button>\r\n      <button class=\"button__results button\" type=\"button\">Results</button>\r\n    </div>\r\n  </section>\r\n  <section class=\"game-options\">\r\n  <div class=\"container\">\r\n  <div class=\"game-option_close\">\r\n  <div class=\"button__size_close\">X</div>\r\n</div>\r\n    <table class=\"game-options__table table\">\r\n\r\n      <tbody class=\"table__body\">\r\n        <tr class=\"table__row table__row_bold\">\r\n          <td class=\"table__cell\">Difficulty</td>\r\n          <td class=\"table__cell\">Columns</td>\r\n          <td class=\"table__cell\">Rows</td>\r\n          <td class=\"table__cell\">Mines</td>\r\n        </tr>\r\n        <tr class=\"table__row\">\r\n          <td class=\"table__cell\">\r\n            <label>\r\n              <input class='difficulty' type=\"radio\" name=\"difficulty\" value=\"easy\" checked>\r\n              Easy\r\n            </label>\r\n          </td>\r\n          <td class=\"table__cell\" id=\"height-input_easy\">10</td>\r\n          <td class=\"table__cell\" id=\"width-input_easy\">10</td>\r\n          <td class=\"table__cell\">\r\n            <input class='table__input' id=\"mines-input_easy\" type=\"number\" name=\"mines\" min=\"10\" max=\"99\" value=\"10\"\r\n              placeholder='10-99'>\r\n          </td>\r\n          </td>\r\n        </tr>\r\n        <tr class=\"table__row\">\r\n          <td class=\"table__cell\"><label>\r\n              <input class='difficulty' type=\"radio\" name=\"difficulty\" value=\"medium\">\r\n              Medium\r\n            </label></td>\r\n          <td class=\"table__cell\" id=\"height-input_medium\">15</td>\r\n          <td class=\"table__cell\" id=\"width-input_medium\">15</td>\r\n          <td class=\"table__cell\">\r\n            <input class='table__input' id=\"mines-input_medium\" type=\"number\" name=\"mines\" min=\"10\" max=\"99\" value=\"15\"\r\n              placeholder='10-224'>\r\n          </td>\r\n          </td>\r\n        </tr>\r\n        <tr class=\"table__row\">\r\n          <td class=\"table__cell\"><label>\r\n              <input class='difficulty' type=\"radio\" name=\"difficulty\" value=\"hard\">\r\n              Hard\r\n            </label></td>\r\n          <td class=\"table__cell\" id=\"height-input_hard\">25</td>\r\n          <td class=\"table__cell\" id=\"width-input_hard\">25</td>\r\n          <td class=\"table__cell\">\r\n            <input class='table__input' id=\"mines-input_hard\" type=\"number\" name=\"mines\" min=\"10\" max=\"99\" value=\"25\"\r\n              placeholder='10-624'>\r\n          </td>\r\n          </td>\r\n        </tr>\r\n        <tr class=\"table__row\">\r\n          <td class=\"table__cell\"><label>\r\n              <input class='difficulty' type=\"radio\" name=\"difficulty\" value=\"custom\">\r\n              Custom\r\n            </label></td>\r\n          <td class=\"table__cell\">\r\n            <input class='table__input' id=\"height-input_custom\" type=\"number\" name=\"height\" min=\"10\" max=\"\" value=\"25\">\r\n          </td>\r\n          <td class=\"table__cell\">\r\n            <input class='table__input' id=\"width-input_custom\" type=\"number\" name=\"width\" min=\"10\" max=\"\" value=\"30\">\r\n          </td>\r\n          <td class=\"table__cell\">\r\n            <input class='table__input' id=\"mines-input_custom\" type=\"number\" name=\"mines\" min=\"10\" max=\"99\" value=\"15\"\r\n              placeholder='ggg'>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    </div>\r\n  </section>\r\n  <div class=\"opacity\"></div>\r\n  <section class=\"board\">\r\n    <div class=\"board__header header\">\r\n      <div class=\"header__time\">\r\n        <div class=\"header__time-past\">Time:\r\n          <span class=\"min\"></span>\r\n          <span class=\"sec\"></span>\r\n        </div>\r\n      </div>\r\n      <div class=\"header__moves\">Moves:\r\n        <span class=\"moves\">0</span>\r\n      </div>\r\n    </div>\r\n  </section>\r\n  <section class=\"another-game\">\r\n    <button class=\"button__size button\" type=\"button\">Change size</button>\r\n        <button class=\"button__restart button\" type=\"button\">New game\r\n          <span class=\"material-symbols-outlined\">\r\n            restart_alt\r\n          </span>\r\n        </button>\r\n  </section>\r\n  <section class=\"game-over\">\r\n    <div class=\"game-over__info\">\r\n  \r\n \r\n    </div>\r\n    <div class=\"game-over__buttons\">\r\n      <button class=\"button__size get-result button\" type=\"button\">Change size</button>\r\n      <button class=\"button__restart get-result button\" type=\"button\">New game\r\n        <span class=\"material-symbols-outlined\">\r\n          restart_alt\r\n        </span>\r\n      </button>\r\n    </div>\r\n  </section>\r\n  <section class=\"game__results results\">\r\n    <div class=\"results__modal\">\r\n    </div>\r\n  </section>\r\n  `;\r\n  body.appendChild(wrapper);\r\n  const boardBody = document.createElement('div');\r\n  boardBody.classList.add('board__body');\r\n  const gameSection = document.querySelector('.board');\r\n  gameSection.appendChild(boardBody);\r\n  const minesInfo = document.createElement('div');\r\n  minesInfo.classList.add('board__footer');\r\n  minesInfo.innerHTML = `\r\n  <div>Mines: \r\n    <span id=\"mines-count\"></span>\r\n  </div>\r\n  <div>Flags left: \r\n    <span id=\"flags-count\"></span>\r\n  </div>\r\n  `;\r\n  gameSection.appendChild(minesInfo);\r\n  let elem = document.querySelector('.game-over__info')\r\n \r\n  const imgLose = new Image();\r\n  imgLose.className = 'game-over__img_lose lose'\r\n  imgLose.src = _img_lose_img_png__WEBPACK_IMPORTED_MODULE_0__;\r\n  imgLose.alt = 'lose-img';\r\n  elem.appendChild(imgLose)\r\n  const imgWin = new Image();\r\n  imgWin.className = 'game-over__img_win win'\r\n  imgWin.src = _img_win_img_png__WEBPACK_IMPORTED_MODULE_1__;\r\n  imgWin.alt = 'win-img';\r\n  elem.appendChild(imgWin);\r\n  const textWin = document.createElement('div');\r\n  textWin.className = 'game-over__text';\r\n  textWin.innerHTML = `\r\n  <p class=\"game-over__message lose\">Try again</p>\r\n        <div class=\"game-over__message win\">\r\n          Hooray! You found all mines in\r\n          <span class=\"game-over__time\"></span> seconds and\r\n          <span class=\"game-over__moves\"></span> moves!\"\r\n        </div>\r\n        <input class=\"game-over__input win\" type=\"text\" name=\"player-name\" autofocus placeholder=\"Enter your name here\">\r\n  `\r\n  elem.appendChild(textWin);\r\n}\r\n\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/js/structure.js?");

/***/ }),

/***/ "./src/img/lose-img.png":
/*!******************************!*\
  !*** ./src/img/lose-img.png ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"cde203fd56b2b39b017e.png\";\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/img/lose-img.png?");

/***/ }),

/***/ "./src/img/win-img.png":
/*!*****************************!*\
  !*** ./src/img/win-img.png ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"b4a9016dddfcc2c61d48.png\";\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/img/win-img.png?");

/***/ }),

/***/ "./src/sounds/audioFlag.mp3":
/*!**********************************!*\
  !*** ./src/sounds/audioFlag.mp3 ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"c9d136ec074abd614ebb.mp3\";\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/sounds/audioFlag.mp3?");

/***/ }),

/***/ "./src/sounds/bombAudio.mp3":
/*!**********************************!*\
  !*** ./src/sounds/bombAudio.mp3 ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"b91b0a787401b2ed89df.mp3\";\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/sounds/bombAudio.mp3?");

/***/ }),

/***/ "./src/sounds/clickAudio.mp3":
/*!***********************************!*\
  !*** ./src/sounds/clickAudio.mp3 ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"9489e43081f9d875ee01.mp3\";\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/sounds/clickAudio.mp3?");

/***/ }),

/***/ "./src/sounds/loseAudio.mp3":
/*!**********************************!*\
  !*** ./src/sounds/loseAudio.mp3 ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"7bb31731ef8a611fbe02.mp3\";\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/sounds/loseAudio.mp3?");

/***/ }),

/***/ "./src/sounds/winAudio.mp3":
/*!*********************************!*\
  !*** ./src/sounds/winAudio.mp3 ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"43884c61107756b82d4e.mp3\";\n\n//# sourceURL=webpack://sandrainporto-jsfe2023q1/./src/sounds/winAudio.mp3?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/combine.js");
/******/ 	
/******/ })()
;